
tasks.register('debug', JavaExec) {
    group = "CAS"
    description = "Debug the CAS web application in embedded container mode on port 5005"
    jvmArgs = [
        "-server",
        "-Xmx2048M",
        "-XX:+TieredCompilation",
        "-XX:TieredStopAtLevel=1"
    ]
    debug = true
    systemProperties = System.properties
    classpath = files("$buildDir/libs/cas.war")
}
tasks.register('run', JavaExec) {
    group = "CAS"
    description = "Run the CAS web application in embedded container mode"
    jvmArgs = [
        "-server",
        "-Xmx2048M",
        "-XX:+TieredCompilation",
        "-XX:TieredStopAtLevel=1"
    ]
    debug = false
    systemProperties = System.properties
    classpath = files("$buildDir/libs/cas.war")
}



task showConfiguration(group: "CAS", description: "Show configurations for each dependency, etc") {
    doLast() {
        def cfg = project.hasProperty("configuration") ? project.property("configuration") : "compile"
        configurations.getByName(cfg).each { println it }
    }
}

task allDependenciesInsight(group: "build", type: DependencyInsightReportTask, description: "Produce insight information for all dependencies") {}

task allDependencies(group: "build", type: DependencyReportTask, description: "Display a graph of all project dependencies") {}

task casVersion(group: "CAS", description: "Display the current CAS version") {
    doFirst {
        def verbose = project.hasProperty("verbose") && Boolean.valueOf(project.getProperty("verbose"))
        if (verbose) {
            def out = services.get(StyledTextOutputFactory).create("CAS")
            println "******************************************************************"
            out.withStyle(Style.Info).println "Apereo CAS ${project.version}"
            out.withStyle(Style.Description).println "Enterprise Single SignOn for all earthlings and beyond"
            out.withStyle(Style.SuccessHeader).println "- GitHub: "
            out.withStyle(Style.Success).println "https://github.com/apereo/cas"
            out.withStyle(Style.SuccessHeader).println "- Docs: "
            out.withStyle(Style.Success).println "https://apereo.github.io/cas"
            out.withStyle(Style.SuccessHeader).println "- Blog: "
            out.withStyle(Style.Success).println "https://apereo.github.io"
            println "******************************************************************"
        } else {
            println project.version
        }
    }
}

task springBootVersion(description: "Display current Spring Boot version") {
    doLast {
        println rootProject.springBootVersion
    }
}

task zip(type: Zip) {
    from projectDir
    exclude '**/.idea/**', '.gradle', 'tmp', '.git', '**/build/**', '**/bin/**', '**/out/**', '**/.settings/**'
    destinationDirectory = buildDir
    archiveFileName = "${project.name}.zip"
    def zipFile = new File("${buildDir}/${archiveFileName}")
    doLast {
        if (zipFile.exists()) {
            println "Zip archive is available at ${zipFile.absolutePath}"
        }
    }
}

task createKeystore(group: "CAS", description: "Create CAS keystore") {
    def dn = "CN=cas.example.org,OU=Example,OU=Org,C=US"
    if (project.hasProperty("certificateDn")) {
        dn = project.getProperty("certificateDn")
    }
    def subjectAltName = "dns:example.org,dns:localhost,ip:127.0.0.1"
    if (project.hasProperty("certificateSubAltName")) {
        subjectAltName = project.getProperty("certificateSubAltName")
    }

    doFirst {
        def certDir = project.getProperty("certDir")
        def serverKeyStore = project.getProperty("serverKeystore")
        def exportedServerCert = project.getProperty("exportedServerCert")
        def storeType = project.getProperty("storeType")
        def keystorePath = "$certDir/$serverKeyStore"
        def serverCert = "$certDir/$exportedServerCert"

        mkdir certDir
        // this will fail if thekeystore exists and has cert with cas alias already (so delete if you want to recreate)
        logger.info "Generating keystore for CAS with DN ${dn}"
        exec {
            workingDir "."
            commandLine "keytool", "-genkeypair", "-alias", "cas",
                    "-keyalg", "RSA",
                    "-keypass", "changeit", "-storepass", "changeit",
                    "-keystore", keystorePath,
                    "-dname", dn, "-ext", "SAN=${subjectAltName}",
                    "-storetype", storeType
        }
        logger.info "Exporting cert from keystore..."
        exec {
            workingDir "."
            commandLine "keytool", "-exportcert", "-alias", "cas",
                    "-storepass", "changeit", "-keystore", keystorePath,
                    "-file", serverCert
        }
        logger.info "Import $serverCert into your Java truststore (\$JAVA_HOME/lib/security/cacerts)"
    }
}

task unzipWAR(type: Copy, group: "CAS", description: "Explodes the CAS web application archive") {
    dependsOn 'build'
    def destination = "${buildDir}/app"

    from zipTree("build/libs/casconfigserver.war")
    into "${destination}"
    doLast {
        println "Unzipped WAR into ${destination}"
    }
}

task verifyRequiredJavaVersion {
    def currentVersion = org.gradle.api.JavaVersion.current()
    logger.info "Checking current Java version ${currentVersion} for required Java version ${project.targetCompatibility}"
    def targetVersion = JavaVersion.toVersion(project.targetCompatibility)
    if (!currentVersion.isCompatibleWith(targetVersion)) {
        logger.warn("Careful: Current Java version ${currentVersion} does not match required Java version ${project.targetCompatibility}")
    }
}

task copyCasConfiguration(type: Copy, group: "CAS",
        description: "Copy the CAS configuration from this project to /etc/cas/config") {
    from "etc/cas/config"
    into new File('/etc/cas/config').absolutePath
    doFirst {
        new File('/etc/cas/config').mkdirs()
    }
}


def skipValidation = project.hasProperty("validate") && project.property("validate").equals("false")
if (!skipValidation) {
    task validateConfiguration(type: Copy, group: "CAS",
            description: "Validate CAS configuration") {
        def file = new File("${projectDir}/src/main/resources/application.properties")
        if (file.exists()) {
            throw new GradleException("This overlay project is overriding a CAS-supplied configuration file at ${file.path}. "
                + "Overriding this file will disable all default CAS settings that are provided to the overlay, and "
                + "generally has unintended side-effects. It's best to move your configuration inside an application.yml "
                + "file, if you intend to keep the configuration bundled with the CAS web application. \n\nTo disable this "
                + "validation step, run the build with -Pvalidate=false.");
        }
    }
    processResources.dependsOn(validateConfiguration)
}

